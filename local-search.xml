<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Minimal TikZ 学习笔记</title>
    <link href="/2021/09/10/Minimal-TikZ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <url>/2021/09/10/Minimal-TikZ-%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>本文为<code>A very minimal introduction to TikZ</code>学习笔记，主要将一些重点内容用中文记录下来。基本原因是我看英语看得头疼。<br><span id="more"></span><br>该指南作者为Jacques Cr´emer，内容发表于2011年3月11日。</p><p>由于网站平台限制，文中的代码将无法执行，所以无法直观地看到输出结果。有兴趣的读者可以自行输入和编译并观察实验结果。</p><h2 id="Picture环境"><a href="#Picture环境" class="headerlink" title="Picture环境"></a>Picture环境</h2><p>通常使用如下基本配置，实现中文环境下文章的编辑。通常情况下，我们会外套table环境用于图片定位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs latex">\documentclass[tikz]&#123;article&#125;<br>\usepackage&#123;tikz&#125;<br>\usepackage[UTF8]&#123;ctex&#125;<br>\begin&#123;document&#125;<br>    \begin&#123;figure&#125;<br>        \begin&#123;tikzpicture&#125;<br>            code here<br>        \end&#123;tikzpicture&#125;<br>        \caption&#123;CAPTION&#125;<br>    \end&#123;figure&#125;<br>\end&#123;document&#125;<br></code></pre></td></tr></table></figure><p>如果只希望进行配图的生成，使用如下配置。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex">\documentclass[margin=10pt,tikz]&#123;standalone&#125;<br>\usepackage&#123;tikz&#125;<br>\usepackage[UTF8]&#123;ctex&#125;<br>\begin&#123;document&#125;<br>    \begin&#123;tikzpicture&#125;<br>        code here<br>    \end&#123;tikzpicture&#125;<br>\end&#123;document&#125;<br></code></pre></td></tr></table></figure><h2 id="基本绘图"><a href="#基本绘图" class="headerlink" title="基本绘图"></a>基本绘图</h2><p>TikZ使用坐标系来精确定位图像元素的位置，请在绘图时将图像坐标牢记于心。</p><p>我们会建议用户使用结点<code>\node</code>来标记元素坐标，而不是直接使用立即数。但是，教程中我们采取了后者，为了清晰可见的视觉效果。</p><h3 id="直线"><a href="#直线" class="headerlink" title="直线"></a>直线</h3><p>一条直线，注意分号是必须的。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw (0, 0) -- (1, 2);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>一条折线</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw (0, 0) -- (1, 2) -- (2, 3) -- (1, 0);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>带有辅助网格的折线，辅助网格可以帮助用户定位。辅助网格使用风格<code>help lines</code>，推荐在其他元素之前绘制，防止覆盖和叠加。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw[help lines] (0， 0) grid (2, 3);<br>    \draw (0, 0) -- (1, 2) -- (2, 3) -- (1, 0);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="图像缩放"><a href="#图像缩放" class="headerlink" title="图像缩放"></a>图像缩放</h3><p>通过在环境上添加<code>scale</code>的值，可以调整图片的缩放尺度。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;[scale=3]<br>    \draw (0, 0) -- (1, 1);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;[xscale=2, yscale=3]<br>    \draw (0, 0) -- (1, 1);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="箭头，和对应衍生物"><a href="#箭头，和对应衍生物" class="headerlink" title="箭头，和对应衍生物"></a>箭头，和对应衍生物</h3><p>线可以添加相应的”装饰”。通常来说，箭头类装饰只会出现在线的两侧，折线也是如此。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [-&gt;] (0, 0) -- (2, 0);<br>    \draw [&lt;-] (0, -0.5) -- (2,-0.5);<br>\draw [|-&gt;] (0,-1) -- (2,-1);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>双向箭头可以作为一种取巧的方式产生坐标系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [&lt;-&gt;] (0,2) -- (0,0) -- (3,0);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="改变线的宽度"><a href="#改变线的宽度" class="headerlink" title="改变线的宽度"></a>改变线的宽度</h3><p>通过各种<code>decoration</code>来改变线的风格，宽度的风格有<code>ultra thin, very thin, thin, semithick, thick, very thick, ultra thick</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [ultra thick] (0,1) -- (2,1);<br>    \draw [thick] (0,0.5) -- (2,0.5);<br>    \draw [thin] (0,0) -- (2,0);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>先前提及的<code>help lines</code>，其实是一种<code>fine gray</code>的装饰，可以用作各种辅助线。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [&lt;-&gt;] (0,2) -- (0,0) -- (4,0);<br>    \draw [thick] (0,1.5) -- (3,0);<br>    \draw [ultra thick] (0,0) -- (2,2);<br>    \draw [help lines] (1,0) -- (1,1) -- (0,1);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>当然可以自由指定线宽。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [line width=12] (0,0) -- (2,0);<br>    \draw [line width=0.2cm] (4,.75) -- (5,.25);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="dashes-and-dots"><a href="#dashes-and-dots" class="headerlink" title="dashes and dots"></a>dashes and dots</h3><p>可以使用散点和散线。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [dashed, ultra thick] (0,1) -- (2,1);<br>    \draw [dashed] (0, 0.5) -- (2,0.5);<br>    \draw [dotted] (0,0) -- (2,0);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="颜色"><a href="#颜色" class="headerlink" title="颜色"></a>颜色</h3><p>可以直接指定颜色，包括<code>red, green, blue, cyan, magenta, yellow, black, gray, darkgray, lightgray, brown, lime, olive, orange, pink, purple, teal, violet, white</code>，也可以通过不同方法定义自己的颜色。参考手册即可。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [gray] (0,1) -- (2,1);<br>    \draw [red] (0, 0.5) -- (2,0.5);<br>    \draw [blue] (0,0) -- (2,0);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="文中符号和图形"><a href="#文中符号和图形" class="headerlink" title="文中符号和图形"></a>文中符号和图形</h3><p>事实上，如果不外套figure环境，你可以做到行内符号和图形。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125; \draw [yellow, line width=6] (0,0) -- (.5,0); \end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="曲线"><a href="#曲线" class="headerlink" title="曲线"></a>曲线</h3><p>TikZ提供各种各样的曲线。示例如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>\draw [blue] (0,0) rectangle (1.5,1);<br>\draw [red, ultra thick] (3,0.5) circle [radius=0.5];<br>\draw [gray] (6,0) arc [radius=1, start angle=45, end angle= 120];<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p><code>arc</code>中，各个参数有这样的含义，即radius表示半径，start angle 表示起始点的角度，end angle 表示终止点的角度。</p><p>TikZ也允许你获得圆滑的路径。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [&lt;-&gt;, rounded corners, thick, purple] (0,2) -- (0,0) -- (3,0);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>其他的曲线呢？TikZ允许你通过大量的点，(x, y)模拟一条曲线。当然这不是最佳的选择。TikZ提供了数学工具，可以产生大致的曲线。不过你需要指定起点终点的倾角。这个倾角的取值范围为[0, 360)，大概。我没看手册，应该吧。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw[very thick] (0,0) to [out=90,in=195] (2,1.5);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>注意这里使用了<code>to</code>关键词表示你制定了一条曲线。值得提醒的是，你也可以使用<code>&lt;-&gt;</code>之类的符号给曲线增加箭头。</p><h3 id="数学作图"><a href="#数学作图" class="headerlink" title="数学作图"></a>数学作图</h3><p>TikZ允许你通过数学公式绘制图像。代码如下。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;[xscale=13,yscale=3.8]<br>    \draw [&lt;-&gt;] (0,0.8) -- (0,0) -- (0.5,0);<br>    \draw[green, ultra thick, domain=0:0.5] plot (\x, &#123;0.025+\x+\x*\x&#125;);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>这里的<code>\x</code>事实上是点的真实坐标。<code>domain</code>提供了定义域的范围。除了这些函数，TkiZ还提供了</p><ul><li><code>factorial(\x)</code></li><li><code>sqrt(\x),</code></li><li><code>pow(\x, y)</code>，x的y次幂。</li><li><code>exp(\x)</code></li><li><code>ln(\x)</code></li><li><code>log10(\x)</code></li><li><code>log2(\x)</code></li><li><code>abs(\x)</code>，x的绝对值。</li><li><code>mod(\x, y</code>，x 模 y。</li><li><code>round(\x)</code>，取值到最近的整数。</li><li><code>floor(\x)</code>，下取整数。</li><li><code>ceil(\x)</code>，上取整数。</li><li><code>sin(\x)</code>，x是角度，如果想使用弧度，请使用函数sin(\x r)。</li><li><code>cos(\x)</code>，x是角度，如果想使用弧度，请使用函数cos(\x r)。</li><li><code>tan(\x)</code>, x是角度，如果想使用弧度，请使用函数tan(\x r)。</li><li><code>min(\x, y)</code>。</li><li><code>max(\x, y)</code>。</li></ul><p>和<code>rnd</code>产生[0,1]中随机数的函数，和两个常数<code>e = 2.718281828, pi = 3.141592654</code>。</p><p>下面的图象有不错的视觉效果。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [help lines, &lt;-&gt;] (0,0) -- (6.5,0);<br>    \draw [help lines, -&gt;] (0,-1.1) -- (0,1.1);<br>    \draw [green,domain=0:2*pi] plot (\x, &#123;(sin(\x r)* ln(\x+1))/2&#125;);<br>    \draw [red,domain=0:pi] plot (\x, &#123;sin(\x r)&#125;);<br>    \draw [blue, domain=pi:2*pi] plot (\x, &#123;cos(\x r)*exp(\x/exp(2*pi))&#125;);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="填充区域"><a href="#填充区域" class="headerlink" title="填充区域"></a>填充区域</h3><p>简单使用<code>fill</code>参数即可将闭曲线填充。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [fill=red,ultra thick] (0,0) rectangle (1,1);<br>    \draw [fill=red,ultra thick,red] (2,0) rectangle (3,1);<br>    \draw [blue, fill=blue] (4,0) -- (5,1) -- (4.75,0.15) -- (4,0);<br>    \draw [fill] (7,0.5) circle [radius=0.1];<br>    \draw [fill=orange] (9,0) rectangle (11,1);<br>    \draw [fill=white] (9.25,0.25) rectangle (10,1.5);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p><code>fill = red</code>告诉TikZ你想要用红色填充，<code>red</code>告诉TikZ你想用红色绘制路径。</p><p>有的时候你不想看到路径，即边框线。那么可以使用<code>\path</code>指令实现这一功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>\path [fill=gray] (0,0) rectangle (1.5,1);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="复杂路径仍然可以填充"><a href="#复杂路径仍然可以填充" class="headerlink" title="复杂路径仍然可以填充"></a>复杂路径仍然可以填充</h3><p>只要路径的终点和起点相吻合，图形一样可以填充。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [ultra thick] (0,0) to [out=87,in=150] (1,1) -- (.85,.15) -- (0,0);<br>    \draw [ultra thick, fill=purple] (2,0) to [out=87,in=150] (3,1) -- (2.85,.15) -- (2,0);<br>    \path [fill=purple] (4,0) to [out=87,in=150] (5,1) -- (4.85,.15) -- (4,0);<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="图像中放置标签"><a href="#图像中放置标签" class="headerlink" title="图像中放置标签"></a>图像中放置标签</h3><p>标签的放置可以通过<code>\node</code>实现。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [thick, &lt;-&gt;] (0,2) -- (0,0) -- (2,0);<br>    \node at (1,1) &#123;yes&#125;;<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p><code>\node</code> 可以添加标记，即<code>\node(node name)</code>。如果只是为了标记，可以使用<code>\node (node name) at (x, y)</code>定义坐标点。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [thick, &lt;-&gt;] (0,2) -- (0,0) -- (2,0);<br>    \draw [fill] (1,1) circle [radius=0.025];<br>    \node [below] at (1,1) &#123;below&#125;;<br>    \node [above] at (1,1) &#123;above&#125;;<br>    \node [left]  at (1,1) &#123;left&#125;;<br>    \node [right] at (1,1) &#123;right&#125;;<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>也有更加绚丽的图片。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [thick, &lt;-&gt;] (0,1) -- (0,0) -- (1,0);<br>    \draw[fill] (1,1) circle [radius=0.025];<br>    \node [below right, red] at (.5,.75) &#123;below right&#125;;<br>    \node [above left, green] at (.5,.75) &#123;above left&#125;;<br>    \node [below left, purple] at (.5,.75) &#123;below left&#125;;<br>    \node [above right, magenta] at (.5,.75) &#123;above right&#125;;<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>这种情况下，我们可以获得一个完美的坐标系。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [thick, &lt;-&gt;] (0,1) -- (0,0) -- (1,0);<br>    \node [below right] at (1,0) &#123;$x$&#125;;<br>    \node [left] at (0,1) &#123;$y$&#125;;<br>    \draw[fill] (.4,.6) circle [radius=.5pt];<br>    \node[above right] (.4,.6) &#123;$A$&#125;;<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>当然我们可以将指令合在一起写，省去结点的声明。不过这样的话不符合我们先前约定的规范。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [thick, &lt;-&gt;] (0,1) node [left] &#123;$y$&#125;<br>        -- (0,0) -- (1,0) node [below right] &#123;$x$&#125;;<br>    \draw[fill] (.4,.6) circle [radius=.5pt]<br>        node[above right] (.4,.6) &#123;$A$&#125;;<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><p>在一个结点内，如果你想要产生多行文字，你需要告诉TikZ你在哪个地方换行，使用<code>\\</code>符号。同时，你需要指定对齐方式，否则TikZ将不会渲染。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;tikzpicture&#125;<br>    \draw [thick] (0,0) -- (9,0);<br>    \draw (0,-.2) -- (0, .2);<br>    \draw (3,-.2) -- (3, .2);<br>    \draw (6,-.2) -- (6, .2);<br>    \draw (9,-.2) -- (9, .2);<br>    \node[align=left, below] at (1.5,-.5)%<br>        &#123;This happens\\in period 1\\and is aligned\\ left&#125;;<br>    \node[align=center, below] at (4.5,-.5)%<br>        &#123;This happens\\in period 2\\and is centered&#125;;<br>    \node[align=right, below] at (7.5,-.5)%<br>        &#123;This happens\\in period 2\\and is right\\aligned&#125;;<br>\end&#123;tikzpicture&#125;<br></code></pre></td></tr></table></figure><h3 id="集成进入Beamer"><a href="#集成进入Beamer" class="headerlink" title="集成进入Beamer"></a>集成进入Beamer</h3><p>Beamer 和 TikZ出于同一个作者之手，当然具有良好的集成性。在Beamer中，可以直接使用TikZ。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs latex">\begin&#123;frame&#125;<br>    a few lines<br>    \begin&#123;center&#125;<br>        \begin&#123;tikzpicture&#125;<br>            \draw [blue, ultra thick] (-1,2) -- (6,3);<br>            \uncover&lt;1&gt;&#123;\draw [green,thick] (-4,3) -- (2,2.5);&#125;<br>            \uncover&lt;2&gt;&#123;\draw [red,thick] (0,0) -- (0,5);&#125;<br>        \end&#123;tikzpicture&#125;<br>    \end&#123;center&#125;<br>    and something under.<br>\end&#123;frame&#125;<br></code></pre></td></tr></table></figure><p>其中<code>\uncover</code>不能换成<code>\only</code>，否则其他元素的位置将会改变。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>学习TikZ是一个漫长的过程。TikZ功能强大，还有许多宏包辅助功能，这些都会在将来的实践中发挥作用。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>排版</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>排版</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>遇到的bug汇总</title>
    <link href="/2021/08/29/%E9%81%87%E5%88%B0%E7%9A%84bug%E6%B1%87%E6%80%BB/"/>
    <url>/2021/08/29/%E9%81%87%E5%88%B0%E7%9A%84bug%E6%B1%87%E6%80%BB/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>作为一个能力不足的人，在日常生活中，总会有那么一些bug让我难以接受。我将其中的部分汇总如下，聊以慰藉。</p><span id="more"></span><p>本文理论上是长期更新的，不要嫌文章短（</p><h2 id="历史遗留问题"><a href="#历史遗留问题" class="headerlink" title="历史遗留问题"></a>历史遗留问题</h2><h3 id="PowerToys-的bug"><a href="#PowerToys-的bug" class="headerlink" title="PowerToys 的bug"></a>PowerToys 的bug</h3><p>作为Vim用户，交换Caps Lock和Esc键是常规操作了。为了体现Geek风范，我使用了 MicroSoft维护的PowerToys来实现键盘重映射。</p><p>但是，我没有想到的是，当前版本的PowerToys存在假死的情况。假死过后，会强制软件激活Caps Lock，造成我编码的误操作。令人惊奇的是，激活的Caps Lock，我需要按两次才能取消。第一次是硬件激活，第二次是硬件取消。可以算是步调不一致了。</p><h3 id="“-target”？-你从哪里来？"><a href="#“-target”？-你从哪里来？" class="headerlink" title="“-target”？ 你从哪里来？"></a>“-target”？ 你从哪里来？</h3><p>先前在调试clang的时候，在系统变量中添加了<code>CXXFLAGS</code> 和它的值 <code>-target XXXX</code>。后来因为clang 始终无法测试成功，便卸载了clang。但是，系统变量没有被删除。</p><p>后来，我再调试CMake的时候，无论怎么make都会显示无法通过编译器测试，显示<code>Uknown command line &quot;-target&quot;</code>。</p><p>我怎么想，都觉得不可思议。明明g++使用格式为<code>--target</code>，为什么CMake会这么不合常理地使用这样的编译选项，反而告诉我无法编译呢？</p><p>可想而知，耗费三个小时后，我灵光一闪，删除了系统变量中的<code>CXXFLAGS</code>。编译通过了。</p><p>所以clang和g++读取同一个系统变量，这种原因我不得而知。</p><h3 id="关我Anaconda何事？"><a href="#关我Anaconda何事？" class="headerlink" title="关我Anaconda何事？"></a>关我Anaconda何事？</h3><p>首次使用VSCode编辑Qt6生成的CMake工程时，Intelligence总是提示错误的引用。仔细一看，include到了<code>Anaconda/Library/Qt</code>里面的文件。这就问题很大了。</p><p>思索再三，我发现VSCode的<code>C/C++</code>扩展中对include path的定义，是先在系统环境变量中搜索的。那么，Anaconda的路径在Qt之前，便会直接从Anaconda中include，这就产生了错误。</p><p>将环境变量的顺序调整了之后，问题不再复现。</p><h2 id="编程技术菜菜菜"><a href="#编程技术菜菜菜" class="headerlink" title="编程技术菜菜菜"></a>编程技术菜菜菜</h2><h3 id="C语言篇"><a href="#C语言篇" class="headerlink" title="C语言篇"></a>C语言篇</h3><h4 id="忘记加括号"><a href="#忘记加括号" class="headerlink" title="忘记加括号"></a>忘记加括号</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">PWM_SetPWM_ByDutyCycle(SteerNumber, (<span class="hljs-keyword">uint16_t</span>)(angle * <span class="hljs-number">2.0</span> / <span class="hljs-number">180</span> + <span class="hljs-number">0.5</span>) / <span class="hljs-number">20</span> * <span class="hljs-number">4096</span>);<br></code></pre></td></tr></table></figure><p>这样的代码会将任何angle输入，变成0的。因为uint16_t的作用对象错了，应该是整个表达式的值。表达式的类型是double，在进行计算的时候精度损失可以忽略。但是uint16_t位置不对，提前变换成了整型，这不是胡闹吗？</p><p>正确修改如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs c">PWM_SetPWM_ByDutyCycle(SteerNumber, (<span class="hljs-keyword">uint16_t</span>)((angle * <span class="hljs-number">2.0</span> / <span class="hljs-number">180</span> + <span class="hljs-number">0.5</span>) / <span class="hljs-number">20</span> * <span class="hljs-number">4096</span>));<br></code></pre></td></tr></table></figure><h4 id="volatile-并行计算需要好好学习"><a href="#volatile-并行计算需要好好学习" class="headerlink" title="volatile?并行计算需要好好学习"></a>volatile?并行计算需要好好学习</h4><p>多次读取一个变化的值，读出来的竟然是相同的。这是正常现象，编译器做出来的优化，只需要加上volatile关键词即可。问题的根本在于并行计算理解不够，有待更加深入学习并行计算理论了。</p><h3 id="通病"><a href="#通病" class="headerlink" title="通病"></a>通病</h3><h4 id="无后效性提醒"><a href="#无后效性提醒" class="headerlink" title="无后效性提醒"></a>无后效性提醒</h4><p>在一次编程实践中，我发现系统出现了不应该的异常抖动。代码如下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">Motor_Decode</span><span class="hljs-params">(MotorInput_t x, MotorInput_t y, MotorInput_t w)</span> </span>&#123;<br><br>    <span class="hljs-comment">// 反向的速度才是正方向</span><br>    x = -x;<br>    y = -y;<br><br>    <span class="hljs-comment">// 保存速度结果，便于调试运动状态</span><br>    Motor_InputInstance.x = x;<br>    Motor_InputInstance.y = y;<br>    Motor_InputInstance.w = w;<br><br>    Motor_TargetSpeed[<span class="hljs-number">0</span>] = MotorDecodeOutputFix(Motor_InputInstance.Kx * x +<br>                                                Motor_InputInstance.Ky * y +<br>                                                Motor_InputInstance.Kw * w);<br>    Motor_TargetSpeed[<span class="hljs-number">1</span>] = MotorDecodeOutputFix(-Motor_InputInstance.Kx * x +<br>                                                Motor_InputInstance.Ky * y -<br>                                                Motor_InputInstance.Kw * w);<br>    Motor_TargetSpeed[<span class="hljs-number">2</span>] = MotorDecodeOutputFix(-Motor_InputInstance.Kx * x +<br>                                                Motor_InputInstance.Ky * y +<br>                                                Motor_InputInstance.Kw * w);<br>    Motor_TargetSpeed[<span class="hljs-number">3</span>] = MotorDecodeOutputFix(Motor_InputInstance.Kx * x +<br>                                                Motor_InputInstance.Ky * y -<br>                                                Motor_InputInstance.Kw * w);<br>&#125;<br></code></pre></td></tr></table></figure><p>测试的时候，出现了异常的速度抖动，方向频繁切换。但是，使用如下代码就可以解决。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs c">Motor_Decode(new_x, new_y, new_z);<br>Motor_Decode(Motor_InputInstace.x, Motor_InputInstace.y, Motor_InputInstace.w);<br></code></pre></td></tr></table></figure><p>需要我写两遍？</p><p>不，真正的原因是，代码中的<code>x = -x; y = -y;</code>具有后效性，将速度反向放在这个地方没有任何道理，只会造成相同调用条件产生反向的输出结果。将这两行代码删除后，问题得到解决。</p><h3 id="CMake篇"><a href="#CMake篇" class="headerlink" title="CMake篇"></a>CMake篇</h3><h4 id="“默认化的默认构造函数不能为constexpr”"><a href="#“默认化的默认构造函数不能为constexpr”" class="headerlink" title="“默认化的默认构造函数不能为constexpr”"></a>“默认化的默认构造函数不能为constexpr”</h4><p>首次尝试利用Qt Creator生成mingw工程并利用Visual Studio 2022调试时，就连最基本的代码都无法编译通过。报错就是标题内容，尽管是自动生成的代码。仔细检查后 发现，Visual Studio读取CMake文件时，没有读取到正确的CMake生成器，默认使用了Ninja，这个我可不会。</p><p>在VS的某个界面中，修改CMake工程的生成器，为Unix Makefiles，这样就编译通过了。</p><p>顺带一提，我还没有搞懂Qt Creator生成的MSVC工程如何利用VS 2022调试（</p><h2 id="硬件壬的伤痛"><a href="#硬件壬的伤痛" class="headerlink" title="硬件壬的伤痛"></a>硬件壬的伤痛</h2><h3 id="程序设计"><a href="#程序设计" class="headerlink" title="程序设计"></a>程序设计</h3><h4 id="中断函数提高速度"><a href="#中断函数提高速度" class="headerlink" title="中断函数提高速度"></a>中断函数提高速度</h4><p>中断函数中一定不能写延时，中断函数的速度也需要尽可能提高。如果出现了中断重叠，可能会产生意料之外的错误。例如部分外设频繁死机之类，不容易检查的。</p><h4 id="外设错误调用"><a href="#外设错误调用" class="headerlink" title="外设错误调用"></a>外设错误调用</h4><p>STM32中外设的使用需要提前调用。不仅如此，如果外设使用了某一种调用模式，而你却采用了另一种模式调用，也会出现严重问题，比如，卡死<code>HardFault</code>。举个例子，如果你外设没有配置DMA，或者配置DMA之后使用了阻塞模式，那么，当你下一次尝试使用DMA模式时，会进入<code>HardFault</code>。</p><h3 id="接线错误"><a href="#接线错误" class="headerlink" title="接线错误"></a>接线错误</h3><h4 id="“target-dll-canceled”"><a href="#“target-dll-canceled”" class="headerlink" title="“target dll canceled”"></a>“target dll canceled”</h4><p>众所周知，STM32的调试口是PA13，PA14。由于PCB绘制过程中，出现了与USART1接口相邻的情况，接线员在接线时，误将串口线接在了PA14上。所以，无法进行任何烧写动作了。任何操作都会显示无法连接，毕竟STLink烧写只需要两根线连接PA13，PA14，坏掉一根怎么玩。</p><p>重新将串口线接在USART1的接线柱上，问题得到解决。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>如何理解FOC和SVPWM技术</title>
    <link href="/2021/07/19/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3FOC%E5%92%8CSVPWM%E6%8A%80%E6%9C%AF/"/>
    <url>/2021/07/19/%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3FOC%E5%92%8CSVPWM%E6%8A%80%E6%9C%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>期末考试结束，RoboGame的各种任务又接踵而至。 在电机的驱动方面，我发现野火的驱动方法不是简单的PWM。 这时，我才学习到，无刷直流电机的控制方法并不是一件简单的事情。</p><span id="more"></span><p>接下来，本人将简单梳理FOC和SVPWM的基础内容。 本文全程Copy自<a href="http://www.pengzhihui.xyz">稚晖君</a>的个人博客。 仅供学习参考。有疑问处请参考原博主内容。</p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="FOC-简介"><a href="#FOC-简介" class="headerlink" title="FOC 简介"></a>FOC 简介</h3><p>FOC，Field Oriented Control，是目前无刷直流电机(BLDC)和永磁同步电机(PMSM)高效 控制的最优方法之一。 FOC旨在通过精确地控制磁场大小与方向，使得电机的运动转矩平稳、噪声小、效率高，并且具有高速的动态响应。</p><p>FOC具有如下优势：</p><ul><li>低转速下控制<br>由于控制原理的区别，无刷电调只能控制电机工作在高转速下，低速下无法控制；而FOC控制器则完全没有这个限制，不论在什么转速下都可以实现精确控制。</li><li>电机换向<br>同上面的理由，由于电调无法反馈转子位置，因此很难实现电机正反转的换向（当然有感电调可以实现）；而FOC驱动器的换向性能极其优秀，最高转速下正反转切换可以非常顺畅；此外FOC还可以以能量回收的形式进行刹车控制。</li><li>力矩控制<br>普通电调都只能控制电机转速，而FOC可以进行电流（力矩）、速度、位置三个闭环控制。</li><li>噪音<br>FOC驱动器的噪音会比电调小很多，原因是普通电调采用方波驱动，而FOC是正弦波。</li></ul><h3 id="三相星形联结无刷电机"><a href="#三相星形联结无刷电机" class="headerlink" title="三相星形联结无刷电机"></a>三相星形联结无刷电机</h3><p>三相星形联结无刷电机中，三相的连接方式是，<strong>每一相引出导线的一头，而另一头和其他相两两相连</strong>。</p><p><a href="https://imgtu.com/i/W8TODx"><img src="https://z3.ax1x.com/2021/07/19/W8TODx.md.png" alt="W8TODx.md.png"></a></p><p>对其中两极施加电压，通过右手螺旋定则和磁感应强度的合成，可以判断线圈磁极的方向。 在这种情况下，转子会倾向于转动到力矩最小的角度，这时转子将会与磁极连线平行， 且磁铁<strong>内部磁力线</strong>方向和磁极间磁力线方向一致。</p><p><a href="https://imgtu.com/i/W87Mxs"><img src="https://z3.ax1x.com/2021/07/19/W87Mxs.png" alt="W87Mxs.png"></a></p><p>因此，无刷电机是通过电子转向来驱动转子不停地转动，换向的频率决定了电机的转速。</p><h3 id="BLDC和PMSM"><a href="#BLDC和PMSM" class="headerlink" title="BLDC和PMSM"></a>BLDC和PMSM</h3><p>无刷电机其实可以分为<strong>无刷直流电机</strong>（BLDC）和<strong>永磁同步电机</strong>（PMSM），结构大同小异，主要区别在于制造方式（线圈绕组方式）不同导致的一些特性差异（比如反电动势的波形）。</p><p>BLDC是从硬件出发，采用方波驱动，增加了电机槽和极对数，降低了转子转动的“颗粒感”，达到了平滑驱动的目的。</p><p>PMSM是从软件出发，抛弃了方波，而是使用<strong>正弦波</strong>来完成驱动的平滑化。自然在产生良好特性的正弦波、旋转磁场的同时，会大大<br>增加驱动器、控制算法的复杂程度。好在野火有例程（</p><h3 id="驱动电路"><a href="#驱动电路" class="headerlink" title="驱动电路"></a>驱动电路</h3><p>无刷电机的驱动电力主要使用<strong>三相逆变电路</strong>实现。</p><p><a href="https://imgtu.com/i/W8HSe0"><img src="https://z3.ax1x.com/2021/07/19/W8HSe0.md.png" alt="W8HSe0.md.png"></a></p><p>逆变电路是指，将<strong>直流电</strong>变换为<strong>交流电</strong>的电路。 逆变电路的具体实现通常是<strong>半路MOS电路</strong>，原型很简单， 由两个MOS管组成<strong>上桥臂</strong>和<strong>下桥臂</strong>，中间引出输出线即可。</p><p><a href="https://imgtu.com/i/W8Hmex"><img src="https://z3.ax1x.com/2021/07/19/W8Hmex.md.png" alt="W8Hmex.md.png"></a></p><p>用3个半桥电路就可以组合成三相逆变电路，每个半桥引出的一根输出线跟无刷电机的一根相线相连，就完成了最基本的无刷驱动电路。</p><p>值得注意的是，原作者在这里提醒到，半桥上下同时导通，则电源短路；同时关闭，则产生了力矩浪费。所以通常半桥工作时，上下两桥臂有且仅有一个导通。</p><h3 id="三相电机波形"><a href="#三相电机波形" class="headerlink" title="三相电机波形"></a>三相电机波形</h3><p>手动转动无刷电机的转子，利用示波器观察它的三相输出电压，可以得到三根正弦曲线，两两相位差为$120^{\text{o}}$。</p><p><a href="https://imgtu.com/i/W8HyXn"><img src="https://z3.ax1x.com/2021/07/19/W8HyXn.md.png" alt="W8HyXn.md.png"></a></p><p>相反地，在三相无刷电机的三相线圈上输入这样的三相正弦电压，就可以驱动无刷电机平稳旋转。</p><p>于此，可以提出FOC主要驱动手段，即<strong>计算所需电压矢量，利用SVPWM技术产生调试信号，驱动三相逆变电路，合成等效的三相正弦电压驱动电机</strong>。</p><h2 id="FOC控制原理"><a href="#FOC控制原理" class="headerlink" title="FOC控制原理"></a>FOC控制原理</h2><p>一个基本的FOC控制流程如下所示。</p><p><a href="https://imgtu.com/i/W8biHP"><img src="https://z3.ax1x.com/2021/07/19/W8biHP.md.png" alt="W8biHP.md.png"></a></p><!-- 这里的MathJax把我害惨了！！！！！ --><p>该流程的作用是，利用输入的$I_q $_$ref$和$I_d $_$ ref$，使电机始终产生一个恒定的力矩。</p><p>控制流程为</p><ol><li>对电机三相电流进行采样得到$I_a, I_b, I_c$。</li><li>将$I_a, I_b, I_c$经过 <code>Clark变换</code>得到$I_{\alpha}, I_{\beta}$。</li><li>将$I_{\alpha}, I_{\beta}$经过<code>Park变换</code>得到$I_q, I_d$。</li><li>计算$I_q, I_d$和其设定值$I_q$_$ref$ $I_d $_$ ref$的误差。</li><li>将误差输入PID控制器，得到输出的控制电压$U_q, U_d$。</li><li>将$U_q, U_d$进行 <code>反Park变换</code> 得到$U_{\alpha}, U_{\beta}$。</li><li>用$U_{\alpha}, U_{\beta}$合成电压空间矢量，输入<code>SVPWM模块</code>进行调制，输出此时刻三个半桥的状态编码值。</li><li>按照状态编码值控制三相逆变器的MOS开关，驱动电机。</li><li>循环以上步骤。</li></ol><h3 id="Clark变换"><a href="#Clark变换" class="headerlink" title="Clark变换"></a>Clark变换</h3><p>首先需要对电机的三个相电流进行采用。</p><p>根据基尔霍夫定律(KCL)，在任一时刻，流入节点的电流之和等于流出节点的电流之和，也就是说</p><script type="math/tex; mode=display">    I_a + I_b + I_c = 0</script><p>因此，三相电流事实上只需要两相即可确定。</p><p>三相坐标系$(I_a, I_b, I_c)$如下。</p><p><a href="https://imgtu.com/i/W8LElQ"><img src="https://z3.ax1x.com/2021/07/19/W8LElQ.png" alt="W8LElQ.png"></a></p><p>利用线性代数中的基变换，我们将三相电流转换为直角坐标系下的参量。令新的直角坐标系为$\alpha - \beta$坐标系。</p><script type="math/tex; mode=display">    \begin{cases}    I_\alpha = I_a - \cos (\frac{\pi}{3})I_b - \cos (\frac{2\pi}{3})I_c \\    I_\beta = \sin (\frac{\pi}{3})I_b - \sin(\frac{\pi}{3})I_c    \end{cases}</script><p>或表示为矩阵形式</p><script type="math/tex; mode=display">    \begin{pmatrix}        I_\alpha \\        I_\beta \\    \end{pmatrix} =    \begin{pmatrix}        1 & -\frac{1}{2} & -\frac{1}{2} \\        0 & \frac{\sqrt{3}}{2} & -\frac{\sqrt{3}}{2}    \end{pmatrix}    \begin{pmatrix}        I_a \\        I_b \\        I_c    \end{pmatrix}</script><p>便可以减少一维变量。</p><p><img src="https://pic1.zhimg.com/80/v2-ddb74b212baee03b36eecb32ec54e420_720w.jpg" alt="pic"></p><h3 id="Park变换"><a href="#Park变换" class="headerlink" title="Park变换"></a>Park变换</h3><p>Park变换可以将$I_{\alpha}, I_{\beta}$ 转换为线性的。工作原理依然是线性代数原理，即将$\alpha - \beta$坐标系旋转$\theta$角度，其中$\theta$是转子当前的角度。</p><p><img src="https://pic4.zhimg.com/80/v2-d15d057327992a5c50016aea5bb7201b_720w.jpg" alt="pic"></p><p>变换公式如下</p><script type="math/tex; mode=display">    \begin{cases}        I_d = I_\alpha \cos (\theta) + I_\beta \sin(\theta) \\        I_q = -I_\alpha \sin(\theta) + I_\beta \cos(\theta)    \end{cases}</script><p>或者为矩阵形式</p><script type="math/tex; mode=display">    \begin{pmatrix}        I_d \\        I_q    \end{pmatrix}    =    \begin{pmatrix}        \cos \theta & \sin \theta \\        -\sin \theta & \cos \theta    \end{pmatrix}    \begin{pmatrix}        I_\alpha \\        I_\beta    \end{pmatrix}</script><p>其中$\theta$的获取，需要编码器实时输入转子的实时旋转角度。经过Park变换，一个匀速旋转的向量被转化成了一个定值，两个控制变量也被线性化了。</p><p><img src="https://pic1.zhimg.com/80/v2-d6116ce165ec51df51469ad6ddd4d134_720w.jpg" alt="pic"></p><p>接下里以$I_q, I_d$两个值作为反馈控制的对象，可以用一些线性控制器来进行控制。工业界偏爱PID（</p><h3 id="PID-控制"><a href="#PID-控制" class="headerlink" title="PID 控制"></a>PID 控制</h3><p>FOC控制中主要使用三个PID环，分别是电流环、速度环和位置环。</p><p>具体流程为<strong>通过电流反馈控制电机电流（扭矩）</strong> -&gt; <strong>通过控制扭矩来控制电机的转速</strong> -&gt; <strong>通过控制电机ed转速控制电机位置</strong>。</p><h4 id="电流控制环"><a href="#电流控制环" class="headerlink" title="电流控制环"></a>电流控制环</h4><p>电流环具有如下控制框图。</p><p><img src="https://pic4.zhimg.com/80/v2-92e0d6eaa15bff745a4cd024362f53eb_720w.jpg" alt="pic"></p><p>其中的$I_q， I_d$的物理意义如下。</p><ul><li>$I_d$ 为转子旋转的切向变量，是期望的力矩输出。</li><li>$I_q$ 为转子旋转的径向变量，是不期望的力矩输出，期望值为0</li></ul><p><a href="https://imgtu.com/i/WGGiNj"><img src="https://z3.ax1x.com/2021/07/19/WGGiNj.jpg" alt="WGGiNj.jpg"></a></p><p>事实上，<code>Clark变换</code> 和 <code>Park变换</code>将转子磁链解耦成了转子旋转的<strong>径向</strong>和<strong>切向</strong>两个方向的变量。</p><p>我们希望通过PID控制器，利用上述输入（电流采样，编码器反馈）和输出（MOS管开关状态）完成对电机电流的闭环控制。</p><h4 id="速度控制环"><a href="#速度控制环" class="headerlink" title="速度控制环"></a>速度控制环</h4><p>在电流环的外部嵌套速度环，即可获得速度-电流双环控制。</p><p><a href="https://imgtu.com/i/WGG5Ps"><img src="https://z3.ax1x.com/2021/07/19/WGG5Ps.md.png" alt="WGG5Ps.md.png"></a></p><p>$Speed_{ref}$ 是速度设定值，$\omega$是电机的转速反馈，可以通过电机编码器或者霍尔传感器计算得到。<br>将电机速度$\omega$和速度设定值$Speed_{ref}$进行误差值计算，带入速度环PI，计算的结果作为电流环的输入，就实现了速度-电流的双闭环控制。</p><h4 id="位置控制环"><a href="#位置控制环" class="headerlink" title="位置控制环"></a>位置控制环</h4><p>在电流环外部嵌套位置环，即可获得位置-电流双环控制。</p><p><a href="https://imgtu.com/i/WGYl11"><img src="https://z3.ax1x.com/2021/07/19/WGYl11.md.png" alt="WGYl11.md.png"></a></p><p>由于不存在速度环，这里位置环使用了完整的PID控制。具体原因是，位置的微分是速度，德阳可以减小位置控制的震荡，加快收敛；积分项可以消除静态误差。</p><h3 id="空间电压矢量和SVPWM"><a href="#空间电压矢量和SVPWM" class="headerlink" title="空间电压矢量和SVPWM"></a>空间电压矢量和SVPWM</h3><h4 id="空间电压矢量"><a href="#空间电压矢量" class="headerlink" title="空间电压矢量"></a>空间电压矢量</h4><p>SVPWM的目的，是使用三相桥的开关状态把在空间中旋转的矢量表示出来，这个矢量被称为<strong>空间电压矢量</strong>。</p><p>对于三项桥的任意一种状态，利用数学工具，我们可以计算出三项桥产生的电压矢量$\vec{U}$具有特定的幅值，即相电压峰值$U_{dc}$。这个电压矢量应当具有$\omega=2\pi f$的角速度，才能满足旋转的需要。</p><p>使用数学公式</p><script type="math/tex; mode=display">    \begin{cases}    U_A(t) = U_{dc}\cos(2\pi f t) \\    U_B(t) = U_{dc}\cos(2\pi ft - \frac{2\pi}{3}) \\    U_C(t) = U_{dc}\cos(2\pi ft + \frac{2\pi}{3})    \end{cases}</script><!-- 两个inline math 的\$ 连在一起，挂掉了我的vscode 的\$\$解析 --><p>定义开关函数$S_x(x\in a, b, c)$。</p><script type="math/tex; mode=display">    S_x = \begin{cases}        1, & \text{上桥臂导通} \\        0, & \text{下桥臂导通}    \end{cases}</script><p>$(S_a, S_b, S_c)$的全部可能组合共有8中，其中有6个非零矢量</p><script type="math/tex; mode=display">    U_1(001),U_2(010),U_3(011),U_4(100),U_5(101),U_6(110)</script><p>和两个零矢量</p><script type="math/tex; mode=display">    U_0(000), U_7(111)</script><p>可以绘制出各矢量的图像。</p><p><a href="https://imgtu.com/i/WGdnzj"><img src="https://z3.ax1x.com/2021/07/19/WGdnzj.md.png" alt="WGdnzj.md.png"></a></p><h4 id="SVPWM技术"><a href="#SVPWM技术" class="headerlink" title="SVPWM技术"></a>SVPWM技术</h4><p>利用这6各空间电压矢量作为基向量，可以合成任意矢量。在每一个扇区，选取相邻的两个电压矢量以及零矢量，按照<strong>伏秒平衡原则</strong>来合成每个扇区内的任意电压矢量，即：</p><script type="math/tex; mode=display">    \int^T_0 U_{ref}\text{d}t = \int^{T_x}_0 U_x\text{d}t + \int^{T_x + T_y}_{T_x} U_y\text{d}t + \int^{T}_{T_x+T_y} U_0^{*}\text{d}t</script><p>离散化获得公式</p><script type="math/tex; mode=display">U_{ref}\cdot T = U_x \cdot T_x + U_y \cdot T_y + U_0^{*} \cdot T_0^{*}</script><p>其中$U_{ref}$是我们期望的电压矢量，T是一个PWM周期。</p><p>$U_x, U_y$的选取，应当是$U_{ref}$所在扇区的两侧。</p><p>$U_0^{*}$指的是两个零矢量，可以是$U_0$或者$U_7$，零矢量的选择比较灵活，通过合理地配置零向量可以让空间电压矢量的切换更平缓。</p><p>因此，只需要周期性的切换不同空间电压矢量，合理配置不同基向量在一个周期中的占空比，就可以合成出等效的任意空间电压矢量。</p><h4 id="七段式SVPWM调制法"><a href="#七段式SVPWM调制法" class="headerlink" title="七段式SVPWM调制法"></a>七段式SVPWM调制法</h4><p>七段式SVPWM是指，合理安排SVPWM中的各空间矢量的占空位置，使得MOS管的开关次数最小，最大限度地减少开关损耗的一种调制思路。</p><p>依照$U_{ref}$的所在扇区，可以计算得到如下开关切换顺序</p><div class="table-container"><table><thead><tr><th>$U_{ref}$ 所在扇区</th><th>开关切换顺序</th></tr></thead><tbody><tr><td>Ⅰ区</td><td>$…0-4-6-7-7-6-4-0…$</td></tr><tr><td>Ⅱ区</td><td>$…0-2-6-7-7-6-2-0…$</td></tr><tr><td>Ⅲ区</td><td>$…0-2-3-7-7-3-2-0…$</td></tr><tr><td>Ⅳ区</td><td>$…0-1-3-7-7-3-1-0…$</td></tr><tr><td>Ⅴ区</td><td>$…0-1-5-7-7-5-1-0…$</td></tr><tr><td>Ⅵ区</td><td>$…0-4-5-7-7-5-4-0…$</td></tr></tbody></table></div><p>至此，SVPWM的任务完成，只需要在处理器中赋值给对应通道的捕获比较寄存器产生相应的三个PWM波形，控制MOS管的开关，进而产生期望的电压、电流和力矩。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>“矢量控制”事实上是一种<strong>解耦合</strong>，把相互耦合的三相磁链解耦为容易控制的两轴$I_q$和$I_d$，计算得到响应结果后，再将控制信号耦合传回电机。</p><p>再次<strong>强调</strong>，本文来自稚晖君的个人博客。如有疑问，请参考原博文。</p>]]></content>
    
    
    <categories>
      
      <category>学习</category>
      
      <category>算法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用uVision5建立STM32F10x标准库工程</title>
    <link href="/2021/05/27/%E5%88%A9%E7%94%A8uVision5%E5%BB%BA%E7%AB%8BSTM32F10x%E6%A0%87%E5%87%86%E5%BA%93%E5%B7%A5%E7%A8%8B/"/>
    <url>/2021/05/27/%E5%88%A9%E7%94%A8uVision5%E5%BB%BA%E7%AB%8BSTM32F10x%E6%A0%87%E5%87%86%E5%BA%93%E5%B7%A5%E7%A8%8B/</url>
    
    <content type="html"><![CDATA[<p>电子设计实践大作业开始在即，即使力学考试就在眼前，我仍然花费一段时间来调试这样的程序。<br>何等的敬业精神。<br>在使用uVision建立新工程的时候，我发现过程相对繁琐且缺乏条理。于是便整理过程如下。<br><span id="more"></span></p><p>本文依然无图（笑</p><h2 id="下载STM32F10x-标准库"><a href="#下载STM32F10x-标准库" class="headerlink" title="下载STM32F10x 标准库"></a>下载STM32F10x 标准库</h2><p>进入链接<a href="https://www.st.com/en/embedded-software/stsw-stm32054.html">https://www.st.com/en/embedded-software/stsw-stm32054.html</a><br>下载即可。</p><h2 id="新建工程"><a href="#新建工程" class="headerlink" title="新建工程"></a>新建工程</h2><p>打开uVision5, 进入<code>Project</code> -&gt; <code>New uVision Project</code>,<br>选择工程文件目录，选择使用的芯片型号即可。</p><h2 id="拷贝库文件"><a href="#拷贝库文件" class="headerlink" title="拷贝库文件"></a>拷贝库文件</h2><p>在工程文件目录附近新建几个文件夹，如下</p><pre><code>DocLibraries    CMSIS    STM32F10x_StdPeriph_DriverListingOutputProject    MDK        xxx.uvprojxUser</code></pre><p>其中<code>CMSIS</code> <code>STM...</code>是下载好的标准库文件中的同名目录，<code>xxx.uvprojx</code>是你刚刚新建的工程文件。</p><p>然后将标准库文件中的示例<code>Template</code>中的文件<code>stm32f10x_conf.h stm32f10x_it.c stm32f10x_it.h</code>文件复制到<code>User</code>目录下。<br>如果<code>stm32f10x_it.c</code>中有<code>#include &quot;main.h&quot;</code>，删去。如果Systick中断函数中有内容，全部注释掉即可。</p><h2 id="将文件添加到工程"><a href="#将文件添加到工程" class="headerlink" title="将文件添加到工程"></a>将文件添加到工程</h2><p>打开uVision5, 选中魔术棒右边的一个按钮，添加分组<code>Startup CMSIS STM32F10x_StdPeriph_Driver User DOc</code>。</p><p>然后，分别点击<code>Add Files</code>，将对应的所有可以找到的.c文件添加到相关分组。</p><p>注意，<code>Startup</code>分组中添加的是<code>startup_stm32f10x_hd.s</code>一个汇编文件。其位于<code>arm</code>目录下，<br>因为我们使用的是MDK的编译器，自然选择arm。</p><h2 id="Option中设计工程"><a href="#Option中设计工程" class="headerlink" title="Option中设计工程"></a>Option中设计工程</h2><p>点开魔术棒，进行如下设置：</p><p><code>Target</code>栏目中，设置芯片默认主频为<code>8MHz</code>，这里没有计入倍频。使用armcc5的编译器，在<code>Code Generation</code>中设置。</p><p><code>Output</code>栏目中，选择目录为先前创建的<code>Output</code>目录。勾选<code>Create HEX File</code>便于以后的使用。<code>Listing</code>栏目同理。</p><p><code>C/C++</code>栏目中，<code>Define</code>填入<code>USE_STDPERIPH_DRIVER</code>，不需要填入芯片型号，因为Keil为你自动添加过了，再次添加会无法编译通过。<br>这是不同于网上教程的一点。</p><p>接着，在<code>Include Paths</code>中填入所有你看到的含有.h文件的目录。</p><p><code>Debug</code>栏目右上角，选择你使用的仿真器。</p><p><code>Utilities</code>中选择<code>Use Debug Driver</code>，进入<code>Settings</code>，在<code>Flash Download</code>栏目中，检查Flash大小是不是与芯片实际大小一致。左翻进入<code>Debug</code>栏目，<code>Port</code>选择<code>SW</code>方式，<code>Clock</code>调整下载速度为1MHz。<br>然后确认退出即可。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个时候就可以加载LED测试代码检查是否配置完好了。</p><p>配置过程中心思想就是，uVision对你的代码结构一无所知，对你的芯片需求一无所知。<br>你需要做的就是，在Group中告诉它你是如何组织代码的，告诉它代码放在哪里。<br>在Include Paths中告诉它你的头文件放在哪里。<br>在魔术棒菜单中，告诉它你的芯片是如何工作的。</p><p>仅此而已的工作。</p>]]></content>
    
    
    <categories>
      
      <category>单片机</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>单片机</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>利用Hexo、GitPages建立自己的博客</title>
    <link href="/2021/05/22/%E5%88%A9%E7%94%A8Hexo%E3%80%81GitPages%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/"/>
    <url>/2021/05/22/%E5%88%A9%E7%94%A8Hexo%E3%80%81GitPages%E5%BB%BA%E7%AB%8B%E8%87%AA%E5%B7%B1%E7%9A%84%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h2><p>Hexo是一款基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Heroku上，是搭建博客的首选框架。</p><span id="more"></span><p>一般而言，建立自己的博客之后，我们会赋予它一个独特的域名。仅仅拥有<code>xxx.github.io</code>的域名，不足以满足大多数人的野心。</p><p>在这个不想学习的夜晚，我来整理一下我构建网站的过程，一来记录我的第一次前端（抄作业）项目，二来放松身心，三来给其他同学提供参考。</p><h2 id="任务"><a href="#任务" class="headerlink" title="任务"></a>任务</h2><ul><li>获得个人域名</li><li>GitHub创建个人仓库</li><li>安装Node.js，Hexo，git</li><li>推送网站</li><li>绑定域名</li><li>发布文章</li><li>寻找图床</li></ul><h2 id="行动"><a href="#行动" class="headerlink" title="行动"></a>行动</h2><h3 id="获得个人域名"><a href="#获得个人域名" class="headerlink" title="获得个人域名"></a>获得个人域名</h3><p>为了避免实名认证的费时费力，我选择了<a href="https://www.namesilo.com">NameSilo</a>网站，花了一美元获得了这个域名。事实上，<code>.xyz</code>域名相对价格很低，如果不是很在意的话，可以使用。</p><p>在选择域名时，有几个要点需要注意：</p><ul><li>填写Primary Address时要勾选<code>Keep my information private</code>,这样可以让保护隐私变为默认选项</li><li>除了邮箱，其他的没有必要填真实信息。手机填成真实的也无所谓。</li><li>购买域名时，注意选择<code>WHOIS Privacy</code>,让NameSilo替你成为注册人，防止真实信息暴露公网。</li><li>DNS解析时，可以填写五条解析规则。四条<code>A type</code>的规则指向GitPages的四个IPv4地址，参考<a href="https://docs.github.com/en/pages/configuring-a-custom-domain-for-your-github-pages-site/managing-a-custom-domain-for-your-github-pages-site#configuring-an-apex-domain">GitPages 官方手册</a>；另一条规则<code>CNAME type</code>指向你的GitHub库，具体问题之后详述。</li></ul><h3 id="GitHub创建个人仓库"><a href="#GitHub创建个人仓库" class="headerlink" title="GitHub创建个人仓库"></a>GitHub创建个人仓库</h3><p>这一步相当简单。只需要在GitHub创建一个<code>用户名.github.io</code>的Repo。</p><p>顺带一提，这样做还可以顺便发现一个Special Repository，自己尝试（：</p><h3 id="安装Node-js-Hexo-git"><a href="#安装Node-js-Hexo-git" class="headerlink" title="安装Node.js, Hexo, git"></a>安装Node.js, Hexo, git</h3><p>安装是一件相当愉快的事情。<br>先安装Git，一路next即可。<br>再安装Node.js，也是一路快乐。<br>最后打开terminal，输入</p><pre><code>node -vnpm -v</code></pre><p>检查是否正确安装Node.js。之后输入</p><pre><code>npm install -g hexo-cli</code></pre><p>让它自动安装Hexo即可。</p><p>然后我们需要设置一下Git的ssh密钥，便于我们文章的发布。</p><p>打开安装好的Git Bash, 输入</p><pre><code>git config --global user.name &quot;你的GitHub用户名&quot;git config --global user.email &quot;你的GitHub注册邮箱&quot;ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</code></pre><p> 一路回车键，找到自己电脑上的User\你的Windows用户名\.ssh\id_rsa和id_rsa.pub两个文件。把后一个文件里的全部内容复制，粘贴到GitHub个人页面右上角下拉框-&gt;Settings-&gt;SSH and GPG keys-&gt; SSH Keys -&gt; New SSH keys这个界面中，添加即可。</p><p> 这里应该有图片的，我之后再传吧。</p><p> 回到Git Bash,输入</p><pre><code> ssh git@github.com</code></pre><p>多输几次，不报错了就好了。（玄学X</p><h3 id="推送网站"><a href="#推送网站" class="headerlink" title="推送网站"></a>推送网站</h3><p>随便打开一个你想要放置博客的目录，打开terminal，定位到此处，输入</p><pre><code>hexo init</code></pre><p>hexo就会在该目录下创建博客的基本内容。网络不好就挂代理，我反正下了几遍才下好。</p><p>继续输入</p><pre><code>hexo new testhexo generatehexo server</code></pre><p>打开浏览器进入网址localhost:4000，即可看到你的博客——最原始的样子。</p><p>这是本地预览，怎么放到网上呢？GitPages就是一个好的部署地点！</p><p>在设置之前，需要解释一个概念，在blog根目录里的_config.yml文件称为<strong>站点配置文件</strong>，进入根目录里的themes文件夹，里面也有个_config.yml文件，这个称为<strong>主题配置文件</strong>。</p><p>打开前一个站点配置文件，找到deploy这个单词，填充如下内容：</p><pre><code>deploy:  type: git  repo: git@github.com/GitHub用户名/GitHub用户名.github.io.git  branch: main</code></pre><p>注意repo使用git@才能ssh登录，改成https的话，每次deploy都需要输入密码，烦都烦死了。<br>再注意branch 要使用main，因为GitHub整顿后，将新Repo的默认分支从<code>master</code> 改成了<code>main</code>。不讨论political Correctness。</p><p>回到项目根目录，打开terminal，输入</p><pre><code>npm install hexo-deployer-git --save</code></pre><p>和</p><pre><code>hexo cleanhexo ghexo d</code></pre><p>网络足够好的情况下，可以在网址<code>GitHub用户名.github.io</code>上看到你的博客了。</p><h3 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h3><p>打开你的GitHub，在博客Repo的Settings里面，找到左侧Pages，点进去，右边找到Custom domain，填入你先前注册的域名，再勾选下面的Enforce HTTPS，就搞定了。</p><p>这时候可以回到第一步，把 <code>GitHub用户名.github.io</code>填入先前DNS解析的步骤。Host name填入www, 这样也可以解析www.开头的你的域名。</p><p>我觉得需要图片，到时候再说。</p><p>假说你博客的根目录是/，现进入/source目录，理论上应该有一个<code>_posts</code>文件夹。在它的旁边创建名为<code>CNAME</code>的文件，输入<strong>不带www</strong>的你的域名。</p><p>这时候打开浏览器在地址栏输入你的个性化域名将会直接进入你自己搭建的网站。如果没有，就deploy几次（莽撞</p><p>不需要改动_config.yml里面的内容。</p><h3 id="发布文章"><a href="#发布文章" class="headerlink" title="发布文章"></a>发布文章</h3><p>啊嘞，这个不需要我解释吧。在terminal里使用</p><pre><code>hexo new 文章名</code></pre><p>即可创建一篇文章，位于/source/_posts/目录下的一个.md文件。</p><p>用markdown语法写文章即可。</p><p>发布？<br>在terminal里使用</p><pre><code>hexo cleanhexo generatehexo deploy</code></pre><p>即可发布到你的GitHub Repo上，从而在你的域名上可见。</p><p>建议是先用<code>hexo server</code>在本地预览，给GitHub送去一点善意。</p><p>如果发现发布后主页没有变化，可以尝试重新<code>hexo clean</code>再deploy一次。熟悉这样的节奏就好。</p><h3 id="寻找图床"><a href="#寻找图床" class="headerlink" title="寻找图床"></a>寻找图床</h3><p>图床自己找。我用的是<a href="https://imgtu.com">路过图床</a>，虽然有广告，但是它免费（：</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这就是颓废大学生摸鱼的方式吗？！<br>更多资料自己寻找（：</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://zhuanlan.zhihu.com/p/26625249">吴润-知乎</a></p><p><a href="http://wangwlj.com/2017/09/08/blog_setup/">wangwlj’s Blog</a></p><p><a href="https://hexo.io/zh-cn/docs/">Hexo 官方文档</a></p><p><a href="https://hexo.fluid-dev.com/docs/guide/">Fluid 配置文档</a></p>]]></content>
    
    
    <categories>
      
      <category>博客</category>
      
    </categories>
    
    
    <tags>
      
      <tag>学习</tag>
      
      <tag>博客</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>旧文章归档</title>
    <link href="/2021/05/21/%E6%97%A7%E6%96%87%E7%AB%A0%E5%BD%92%E6%A1%A3/"/>
    <url>/2021/05/21/%E6%97%A7%E6%96%87%E7%AB%A0%E5%BD%92%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<p>正式开始记录文档之前，这里发布了一些奇怪的日常类文章。整理于此，不占用过多空间。</p><span id="more"></span><h2 id="新世界的起始点"><a href="#新世界的起始点" class="headerlink" title="新世界的起始点"></a>新世界的起始点</h2><p>2021-05-21 20:12:16</p><p>或许，这会是一个新的起点。</p><p>这是一篇我在学会markdown之前写的文章，可能格式特别垃圾（就是垃圾）。</p><p>从产生这个奇怪的想法，到真正实现一个照抄的博客，用了大概一天？<br>主要原因是网络比较差，而且相关知识不够充足。</p><p>我都干了什么？</p><ol><li><p>查询相关资料，选择Hexo作为使用的静态博客框架。</p></li><li><p>查询科大FTP使用方法，考虑在这上面搭建。结果失败，因为不会HTML知识。</p></li><li><p>决定在GitHub上搭建网页，使用简陋的JavaScript把我的FTP主页导向GitHub主页。</p></li><li><p>调git，因为网络不好，而且教程给错了指令，造成登录异常。一定要注意<br>GitHub repository网址是不是https，如果是就不能用密钥登录了，<br>需要换成git@github.com:username/repositoryname, 即ssh登录。</p></li><li><p>调Hexo，因为网络不好，经常上传失败。</p></li><li><p>了解新的theme，选定了Fluid。不为别的，就是因为默认的不好看。</p></li></ol><p>流水账到此为止，我需要去写作业了（可怜的科大学生</p><p>今后这个博客会更新一些日常、知识梳理、骂街。主要是我懒得发QQ动态了，显得不成熟。</p><p>祝你生活顺利！</p><h2 id="我站有待完成的事情"><a href="#我站有待完成的事情" class="headerlink" title="我站有待完成的事情"></a>我站有待完成的事情</h2><p>2021-05-22 00:29:48</p><p>为了提高我站的规划水平，我仍需要做的工作包括：</p><ul><li>绑定域名</li><li>调整主题个性化设置</li><li>学习markdown语法</li><li>使用图床</li><li>添加个性化控件，就像前些年的个人博客一样</li><li>学习前端知识</li><li>SEO、评论系统、个人头像、博客分享、订阅功能、High功能、404网页设置</li></ul><p>但，最重要的是，我的课内学习太差了（哭，没时间瞎玩了。</p><p>所以，目前先好好学习吧。</p><h2 id="特大利好消息"><a href="#特大利好消息" class="headerlink" title="特大利好消息"></a>特大利好消息</h2><p>2021-05-22 13:37:48</p><p><strong>好消息</strong> 本站获得了全新域名<a href="https://pickupthefall.xyz">https://pickupthefall.xyz</a></p><p>经历了两个小时的资料查找，终于实现了域名解析的设置。毕竟是没有一点网络知识，费点功夫还是很正常的。</p><p>我的域名是从<a href="https://www.namesilo.com/">Namesilo</a>购买，一共花了不到七块钱（</p><p>主要原因是.xyz真的很便宜。</p><p>GitHub是如何实现这样的域名跳转呢？</p><p>在Namesilo的DNS设置中，我们可以让自定义域名导向GitPage的四个IPv4地址。然后在GitHub上设置depository的CNAME，这样在接收到来自我们域名的访问时，GitPage就会返回我们的depository，从而实现域名解析和跳转。</p><p>听起来很妙，实现起来也很美观（</p><p>下一步，图床！希望这个不会花太多时间。$:)$</p><p>事实上，图床我已经搞定了！我站使用<a href="https://imgtu.com/">路过图床</a>，可以免费提供图片上传和加载。主要是我没钱（</p><p>值得一提的是，这里使用的markdown解释器不支持提前换行。<br>对于LaTeX转markdown选手有点不友好（</p>]]></content>
    
    
    
    <tags>
      
      <tag>日常</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
